import telebot
from telebot import types
from config import TOKEN, AGREEMENT_URL, PRIVACY_URL, ADMIN_ID
from database import users
from utils import calculate_distance
from datetime import datetime, timedelta
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN, threaded=True, num_threads=4)
user_data = {}

GENDERS = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
TARGETS = ["–ú—É–∂—á–∏–Ω—É", "–ñ–µ–Ω—â–∏–Ω—É", "–ù–µ –≤–∞–∂–Ω–æ"]
HOBBIES = [
    "üéµ –ú—É–∑—ã–∫–∞", "üéÆ –ò–≥—Ä—ã", "üìö –ß—Ç–µ–Ω–∏–µ", "üèÉ –°–ø–æ—Ä—Ç", "üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ",
    "üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è", "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "üé• –ö–∏–Ω–æ", "üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ",
    "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "üå≥ –ü—Ä–∏—Ä–æ–¥–∞", "üèãÔ∏è –§–∏—Ç–Ω–µ—Å", "üì∑ –§–æ—Ç–æ"
]


def safe_bot_send_message(chat_id, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Error sending message to {chat_id}: {str(e)}")
        time.sleep(1)
        try:
            return bot.send_message(chat_id, text, **kwargs)
        except Exception as e:
            logger.error(f"Second attempt failed for {chat_id}: {str(e)}")
            return None


def get_user_location(user):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    loc = user.get("location", {})
    if not loc:
        return None

    try:
        lat = float(loc.get("latitude", 0))
        lon = float(loc.get("longitude", 0))
        return (lat, lon)
    except (TypeError, ValueError):
        return None


@bot.message_handler(commands=['start'])
def start(msg):
    user_data[msg.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*GENDERS)
    safe_bot_send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–∞—à –ø–æ–ª?", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text in GENDERS)
def ask_name(msg):
    user_data[msg.chat.id]["gender"] = msg.text
    markup = types.ReplyKeyboardRemove()
    safe_bot_send_message(msg.chat.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=markup)


@bot.message_handler(
    func=lambda m: "gender" in user_data.get(m.chat.id, {}) and "name" not in user_data.get(m.chat.id, {}))
def save_name_and_ask_target(msg):
    if len(msg.text.strip()) < 2:
        safe_bot_send_message(msg.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑:")
        return

    user_data[msg.chat.id]["name"] = msg.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*TARGETS)
    safe_bot_send_message(msg.chat.id, f"{msg.text.strip()}, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text in TARGETS)
def ask_photo(msg):
    user_data[msg.chat.id]["looking_for"] = msg.text
    safe_bot_send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ")


@bot.message_handler(content_types=['photo'])
def ask_age(msg):
    photo_id = msg.photo[-1].file_id
    user_data[msg.chat.id]["photo"] = photo_id
    safe_bot_send_message(msg.chat.id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç 18 –¥–æ 99)")


@bot.message_handler(func=lambda m: m.text.isdigit() and 18 <= int(m.text) <= 99)
def ask_height(msg):
    user_data[msg.chat.id]["age"] = int(msg.text)
    safe_bot_send_message(msg.chat.id, "–í–∞—à —Ä–æ—Å—Ç –≤ —Å–º?")


@bot.message_handler(func=lambda m: m.text.isdigit() and 100 <= int(m.text) <= 250)
def ask_bio(msg):
    user_data[msg.chat.id]["height"] = int(msg.text)
    safe_bot_send_message(msg.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:")


@bot.message_handler(
    func=lambda m: "height" in user_data.get(m.chat.id, {}) and "bio" not in user_data.get(m.chat.id, {}))
def save_bio_and_ask_hobbies(msg):
    user_data[msg.chat.id]["bio"] = msg.text
    ask_hobbies(msg.chat.id)


def ask_hobbies(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(h) for h in HOBBIES]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))

    selected_hobbies = user_data.get(chat_id, {}).get("hobbies", [])
    text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n" +
            "–í—ã–±—Ä–∞–Ω–æ: " + (", ".join(selected_hobbies) if selected_hobbies else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ") +
            "\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É, –∑–∞—Ç–µ–º '‚úÖ –ì–æ—Ç–æ–≤–æ'"
    )

    safe_bot_send_message(chat_id, text, reply_markup=markup)


@bot.message_handler(func=lambda m: m.text in HOBBIES and "height" in user_data.get(m.chat.id, {}))
def handle_hobby_selection(msg):
    chat_id = msg.chat.id
    if "hobbies" not in user_data[chat_id]:
        user_data[chat_id]["hobbies"] = []

    if msg.text not in user_data[chat_id]["hobbies"]:
        user_data[chat_id]["hobbies"].append(msg.text)
    else:
        user_data[chat_id]["hobbies"].remove(msg.text)

    ask_hobbies(chat_id)


@bot.message_handler(func=lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ" and "height" in user_data.get(m.chat.id, {}))
def check_hobbies_and_ask_location(msg):
    chat_id = msg.chat.id
    if not user_data.get(chat_id, {}).get("hobbies"):
        safe_bot_send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–≤–ª–µ—á–µ–Ω–∏–µ!")
        ask_hobbies(chat_id)
        return

    ask_location(msg.chat.id)


def ask_location(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    location_button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    markup.add(location_button)
    safe_bot_send_message(
        chat_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—é–¥–µ–π —Ä—è–¥–æ–º —Å –≤–∞–º–∏.",
        reply_markup=markup
    )


@bot.message_handler(content_types=['location'])
def handle_location(msg):
    if msg.location:
        user_data[msg.chat.id]["location"] = {
            "latitude": msg.location.latitude,
            "longitude": msg.location.longitude
        }
        ask_phone_verification(msg.chat.id)
    else:
        safe_bot_send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        ask_location(msg.chat.id)


def ask_phone_verification(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    phone_btn = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    skip_btn = types.KeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    markup.add(phone_btn, skip_btn)

    safe_bot_send_message(
        chat_id,
        "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–∞–µ—Ç –≤–∞–º —Å–∏–Ω—é—é –≥–∞–ª–æ—á–∫—É –∏ –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "2. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (–Ω–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–µ–Ω)",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
def skip_verification(msg):
    user_data[msg.chat.id]["verified"] = False
    save_profile_after_verification(msg.chat.id)


@bot.message_handler(content_types=['contact'])
def handle_contact(msg):
    if msg.contact.user_id == msg.from_user.id:
        user_data[msg.chat.id]["phone"] = msg.contact.phone_number
        user_data[msg.chat.id]["verified"] = True
        save_profile_after_verification(msg.chat.id)
    else:
        safe_bot_send_message(
            msg.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )


def save_profile_after_verification(chat_id):
    user_data[chat_id]["username"] = bot.get_chat(chat_id).username
    user_data[chat_id]["registered_at"] = datetime.now()

    try:
        users.update_one(
            {"_id": chat_id},
            {
                "$set": user_data[chat_id],
                "$setOnInsert": {
                    "liked": [],
                    "liked_by": [],
                    "viewed": []
                }
            },
            upsert=True
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "‚ù§Ô∏è –ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

        if user_data[chat_id].get("verified", False):
            safe_bot_send_message(
                chat_id,
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Å–∏–Ω—è—è –≥–∞–ª–æ—á–∫–∞ ‚úÖ",
                reply_markup=markup
            )
        else:
            safe_bot_send_message(
                chat_id,
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=markup
            )

        del user_data[chat_id]
    except Exception as e:
        logger.error(f"Error saving profile for {chat_id}: {str(e)}")
        safe_bot_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(commands=['accept'])
def save_profile(msg):
    safe_bot_send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@bot.message_handler(func=lambda m: m.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
def start_search(msg):
    try:
        me = users.find_one({"_id": msg.chat.id})
        if not me:
            safe_bot_send_message(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å /start")
            return

        eight_hours_ago = datetime.now() - timedelta(hours=8)

        query = {
            "_id": {"$ne": msg.chat.id},
            "$or": [
                {"_id": {"$nin": me.get("viewed", [])}},
                {"last_viewed": {"$lt": eight_hours_ago}}
            ]
        }

        if me.get("looking_for") != "–ù–µ –≤–∞–∂–Ω–æ":
            query["gender"] = "–ú—É–∂—á–∏–Ω–∞" if me["looking_for"] == "–ú—É–∂—á–∏–Ω—É" else "–ñ–µ–Ω—â–∏–Ω–∞"

        all_profiles = list(users.find(query))
        my_location = get_user_location(me)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        nearby = []
        for profile in all_profiles:
            profile_location = get_user_location(profile)
            if my_location and profile_location:
                try:
                    distance = calculate_distance(my_location, profile_location)
                except Exception as e:
                    logger.error(f"Error calculating distance: {e}")
                    distance = float('inf')
            else:
                distance = float('inf')

            nearby.append((profile, distance))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        nearby.sort(key=lambda x: (-int(x[0].get("verified", False)), x[1]))
        nearby = nearby[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        if not nearby:
            safe_bot_send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        user_data[msg.chat.id] = {
            "search_results": [p[0]["_id"] for p in nearby],
            "current_index": 0
        }
        show_profile(msg.chat.id, 0)
    except Exception as e:
        logger.error(f"Error in start_search for {msg.chat.id}: {str(e)}")
        safe_bot_send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_profile(chat_id, index):
    try:
        search_data = user_data.get(chat_id, {}).get("search_results", [])
        if not search_data or index >= len(search_data):
            safe_bot_send_message(chat_id, "–ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        profile_id = search_data[index]
        profile = users.find_one({"_id": profile_id})

        if not profile:
            safe_bot_send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã.")
            return

        users.update_one(
            {"_id": chat_id},
            {
                "$addToSet": {"viewed": profile_id},
                "$set": {f"viewed_times.{profile_id}": datetime.now()}
            }
        )

        verified_badge = " ‚úÖ" if profile.get("verified", False) else ""

        text = (
            f"{profile.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}{verified_badge}, {profile['gender']}, {profile['age']} –ª–µ—Ç, {profile['height']}—Å–º\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile.get('hobbies', []))}\n"
            f"–û —Å–µ–±–µ: {profile.get('bio', '')}"
        )

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üëç", callback_data=f"like_{profile_id}"),
            types.InlineKeyboardButton("üëé", callback_data=f"dislike_{profile_id}"),
            types.InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{profile_id}")
        )

        try:
            bot.send_photo(chat_id, profile['photo'], caption=text, reply_markup=markup)
        except Exception as e:
            logger.error(f"Error sending photo to {chat_id}: {str(e)}")
            safe_bot_send_message(chat_id, text, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error showing profile to {chat_id}: {str(e)}")
        safe_bot_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
        if call.data.startswith('like_'):
            handle_like(call)
        elif call.data.startswith('dislike_'):
            handle_dislike(call)
        elif call.data.startswith('report_'):
            handle_report(call)
    except Exception as e:
        logger.error(f"Error handling callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass


def handle_like(call):
    chat_id = call.message.chat.id
    target_id = int(call.data.split('_')[1])

    try:
        user = users.find_one({"_id": chat_id})
        if target_id in user.get("liked", []):
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            show_next_profile(chat_id)
            return

        users.update_one(
            {"_id": target_id},
            {"$addToSet": {"liked_by": chat_id}}
        )

        users.update_one(
            {"_id": chat_id},
            {"$addToSet": {"liked": target_id}}
        )

        target = users.find_one({"_id": target_id})
        if target and chat_id in target.get("liked", []):
            try:
                bot.send_message(
                    chat_id,
                    f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {target.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')}!\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É: @{target.get('username', '–Ω–µ—Ç username')}"
                )
                bot.send_message(
                    target_id,
                    f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {call.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}!\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É: @{call.from_user.username or '–Ω–µ—Ç username'}"
                )
            except Exception as e:
                logger.error(f"Error sending match notification: {str(e)}")

        bot.answer_callback_query(call.id, "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        show_next_profile(chat_id)
    except Exception as e:
        logger.error(f"Error in handle_like: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞")


def handle_dislike(call):
    chat_id = call.message.chat.id
    try:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        show_next_profile(chat_id)
    except Exception as e:
        logger.error(f"Error in handle_dislike: {str(e)}")


def handle_report(call):
    target_id = int(call.data.split('_')[1])
    try:
        bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {target_id}\n"
            f"–û—Ç: @{call.from_user.username or call.from_user.id}\n"
            f"–ò–º—è: {call.from_user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        bot.answer_callback_query(call.id, "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error(f"Error sending report: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã")
    finally:
        show_next_profile(call.message.chat.id)


def show_next_profile(chat_id):
    try:
        search_data = user_data.get(chat_id, {}).get("search_results", [])
        current_index = user_data.get(chat_id, {}).get("current_index", 0) + 1

        if current_index >= len(search_data):
            safe_bot_send_message(chat_id, "–ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        user_data[chat_id]["current_index"] = current_index
        show_profile(chat_id, current_index)
    except Exception as e:
        logger.error(f"Error in show_next_profile for {chat_id}: {str(e)}")
        safe_bot_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã.")


@bot.message_handler(func=lambda m: m.text == "‚ù§Ô∏è –ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
def show_matches(msg):
    try:
        user = users.find_one({"_id": msg.chat.id})
        if not user:
            safe_bot_send_message(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å /start")
            return

        matches = users.find({
            "_id": {"$in": user.get("liked_by", [])},
            "liked": msg.chat.id
        })

        matches_list = list(matches)
        if not matches_list:
            safe_bot_send_message(msg.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π.")
            return

        for match in matches_list:
            try:
                verified_badge = " ‚úÖ" if match.get("verified", False) else ""

                text = (
                    f"üíï –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n"
                    f"{match.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}{verified_badge}, {match['gender']}, {match['age']} –ª–µ—Ç\n"
                    f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(match.get('hobbies', []))}\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ: @{match.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª username')}"
                )
                bot.send_photo(msg.chat.id, match['photo'], caption=text)
            except Exception as e:
                logger.error(f"Error showing match to {msg.chat.id}: {str(e)}")
                safe_bot_send_message(msg.chat.id, text)
    except Exception as e:
        logger.error(f"Error in show_matches for {msg.chat.id}: {str(e)}")
        safe_bot_send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")


@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
def edit_profile(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è"
    ]

    user = users.find_one({"_id": msg.chat.id})
    if not user.get("verified", False):
        items.append("üì± –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")

    items.append("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    markup.add(*items)

    safe_bot_send_message(msg.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text.startswith("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"))
def handle_edit_choice(msg):
    if msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        safe_bot_send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(msg, process_new_name)
    elif msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
        safe_bot_send_message(msg.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
        bot.register_next_step_handler(msg, process_new_photo)
    elif msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
        safe_bot_send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, process_new_bio)
    elif msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è":
        user_data[msg.chat.id] = {"editing": True}
        ask_hobbies(msg.chat.id)


@bot.message_handler(func=lambda m: m.text == "üì± –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
def request_verification(msg):
    ask_phone_verification(msg.chat.id)


def process_new_name(msg):
    if len(msg.text.strip()) < 2:
        safe_bot_send_message(msg.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, process_new_name)
        return

    try:
        users.update_one({"_id": msg.chat.id}, {"$set": {"name": msg.text.strip()}})
        safe_bot_send_message(msg.chat.id, "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"Error updating name for {msg.chat.id}: {str(e)}")
        safe_bot_send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")


def process_new_photo(msg):
    if not msg.photo:
        safe_bot_send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return

    try:
        photo_id = msg.photo[-1].file_id
        users.update_one({"_id": msg.chat.id}, {"$set": {"photo": photo_id}})
        safe_bot_send_message(msg.chat.id, "–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"Error updating photo for {msg.chat.id}: {str(e)}")
        safe_bot_send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")


def process_new_bio(msg):
    try:
        users.update_one({"_id": msg.chat.id}, {"$set": {"bio": msg.text}})
        safe_bot_send_message(msg.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"Error updating bio for {msg.chat.id}: {str(e)}")
        safe_bot_send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")


@bot.message_handler(func=lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "‚ù§Ô∏è –ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    safe_bot_send_message(msg.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


def run_bot():
    while True:
        try:
            logger.info("Starting bot polling...")
            bot.infinity_polling(timeout=30, long_polling_timeout=30)
        except Exception as e:
            logger.error(f"Bot crashed with error: {str(e)}")
            logger.info("Restarting bot in 10 seconds...")
            time.sleep(10)


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    run_bot()